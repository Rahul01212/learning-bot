package checkstyle

var Checks = map[string]CheckDesc{
	"ArrayTrailingComma": CheckDesc{Category: "coding",
		Description: `A comma should be inserted at the end of the last element of the array if there are no left or right curly bracket on the same line.`,
		Rationale:   `Putting a comma at the end of each element allows you to easily change the order of the array, or add new elements at the end without changing the surrounding lines.`,
		Suggestion:  "Insert the missing comma at the end of the last element.",
		Example: `int[] numbers = {
  1,
  2  // Violation: Missing comma.
};`},
	"EmptyStatement": CheckDesc{Category: "coding",
		Description: "Code should not contain empty statements.",
		Rationale:   "Empty statements may introduce bugs and can be hard to spot.",
		Suggestion:  "Remove the empty statement or add a statement body.",
		Example: `if (someCondition);
  doConditional(); // This will always run no matter the value of 'someCondition'
doUnconditional();`},
	"EqualsHashCode": CheckDesc{Category: "coding",
		Description: "Any class which overriders either equals() or hashcode() must override the other.",
		Rationale:   "Both equals() and hashcode() should depend on the same set of fields, so you can use your class in hash-based collections",
		Suggestion:  "Override both equals() and hashcode() functions, making sure both depend on the same sets of fields."},
	"IllegalCatch": CheckDesc{Category: "coding",
		Description: "Catch statements should not handle exception types like 'Exception', 'RuntimeException', or 'Throwable'.",
		Rationale:   "It is never acceptable to catch these types of exception superclasses, as these may lead to catching unexpected errors such as NullPointerException or OutOfMemoryException",
		Suggestion:  "Use a more specific catch statement."},
	"IllegalException": CheckDesc{Category: "coding",
		Description: "The code should never throw an exception like 'Exception' or 'RuntimeException', as this is never acceptable.",
		Rationale:   "This makes it harder to read errors. Try making your own Exception which extends 'Exception'."},
	"InnerAssignment": CheckDesc{Category: "coding",
		Description: "You should not assign variables in subexpressions, with exceptions to assignments in 'for' and 'while' statements.",
		Rationale:   "This makes it harder to see all the places where a variable is set.",
		Suggestion:  "Move the variable assignment outside of the subexpression."},
	"ModifiedControlVariable": CheckDesc{Category: "coding",
		Description: "Loop control variables should not be modified in the loop block.",
		Rationale:   "It makes it harder to follow the program flow.",
		Suggestion:  "Refractor the code as not to modify the control variable in the loop block."},
	"NestedForDepth": CheckDesc{Category: "coding",
		Description: "There are too many nested for loops.",
		Rationale:   "Deeply nested for loops can make it harder to follow the program flow, and may be a sign of bad code.",
		Suggestion:  "Try to reduce the number of nested loops by separating different functionality into separate methods."},
	"NestedIfDepth": CheckDesc{Category: "coding",
		Description: "There are too many nested if statements.",
		Rationale:   "Deeply nested if statement usually means that the function is trying to do many things.",
		Suggestion:  "Try to separate functionality into different methods or refractoring the code by combining if statements."},
	"NestedTryDepth": CheckDesc{Category: "coding",
		Description: "You are trying to nest try statements.",
		Rationale:   "The function may be trying to do many things.",
		Suggestion:  "You can combine try statements together, catching different types of exceptions. Or try separating functionality into different methods."},
	"OneStatementPerLine": CheckDesc{Category: "coding",
		Description: "There are multiple statements in a single line.",
		Rationale:   "Multiple statements crammed in a single line makes it harder to read the code.",
		Suggestion:  "Insert new lines between the statements, making the code easier to follow."},
	"OverloadMethodsDeclarationOrder": CheckDesc{Category: "coding",
		Description: "Overloaded methods must be grouped together.",
		Rationale:   "Grouping overloaded methods makes it easier to find other methods.",
		Suggestion:  "Cut and paste the methods to be after each other."},
	"PackageDeclaration": CheckDesc{Category: "coding",
		Description: "Every class must have a package declaration.",
		Rationale:   "Without a package declaration, the class cannot be imported.",
		Suggestion:  "Add a package declaration."},
	"ParameterAssignment": CheckDesc{Category: "coding",
		Description: "You should never assign parameters.",
		Rationale:   "It is considered a bad programming practice.",
		Suggestion:  "Refractor the code to avoid assigning parameter variables."},
	"RequireThis": CheckDesc{Category: "coding",
		Description: "You must include 'this.' when refering to instance variables and methods.",
		Rationale:   "It allows you to distinguish between instance and local variables.",
		Suggestion:  "Add 'this.' before the variable or method."},
	"SimplifyBooleanExpression": CheckDesc{Category: "coding",
		Description: "You must simplify over-complicated boolean expression.",
		Rationale:   "Over-complicated boolean expressions are redundant make the code harder to understand and maintain.",
		Suggestion:  "Simplify the boolean expression."},
	"SimplifyBooleanReturn": CheckDesc{Category: "coding",
		Description: "You must simplify over-complicated return statements.",
		Rationale:   "Overly-complicated return statements are too vulgar and can be simplified to a single line.",
		Suggestion:  "Simplify the return statement."},
	"StringLiteralEquality": CheckDesc{Category: "coding",
		Description: "You cannot check equality between two strings using == and != in Java.",
		Rationale:   "When using == and != to check equality between strings, you are comparing the memory pointer of the string rather than the actual string.",
		Suggestion:  "Use .equals() to check equality between two strings."},
	"UnnecessaryParanthesis": CheckDesc{Category: "coding",
		Description: "Unnecassary amount of paranthesis are used in a statement or expression.",
		Rationale:   "The extra amount of paranthesis are redundant.",
		Suggestion:  "Remove the redundant paranthesis from the statement or expression."},
	"MissingSwitchDefault": CheckDesc{Category: "coding",
		Description: "The switch statement is missing a default case.",
		Rationale:   "It is a good coding practice to include a default switch clause in every switch statement.",
		Suggestion:  "Add a default case in the switch statement."},
	"FallThrough": CheckDesc{Category: "coding",
		Description: "It is a good coding practice to add 'fallthrough' comments in fall-through cases in switch statements.",
		Rationale:   "This allows future developers to know that the order of the cases matter, and to be careful when changing the order.",
		Suggestion:  "Add a comment such as '// fallthru' on fall-through cases."},
}

type CheckDesc struct {
	Category    string
	Description string
	Rationale   string
	Suggestion  string
	Example     string
}
