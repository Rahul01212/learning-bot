package checkstyle

// Checks contains a list of all checkstyle check descriptions.
var Checks = map[string]CheckDesc{
	"ArrayTrailingComma": {Category: "coding",
		Description: `A comma should be inserted at the end of the last element of the array if there are no left or right curly bracket on the same line.`,
		Rationale:   `Putting a comma at the end of each element allows you to easily change the order of the array, or add new elements at the end without changing the surrounding lines.`,
		Suggestion:  "Insert the missing comma at the end of the last element.",
		Example: `int[] numbers = {
  1,
  2  // Violation: Missing comma.
};`},
	"EmptyStatement": {Category: "coding",
		Description: "Code should not contain empty statements.",
		Rationale:   "Empty statements may introduce bugs and can be hard to spot.",
		Suggestion:  "Remove the empty statement or add a statement body.",
		Example: `if (someCondition);
  doConditional(); // This will always run no matter the value of 'someCondition'
doUnconditional();`},
	"EqualsHashCode": {Category: "coding",
		Description: "Any class which overriders either equals() or hashcode() must override the other.",
		Rationale:   "Both equals() and hashcode() should depend on the same set of fields, so you can use your class in hash-based collections",
		Suggestion:  "Override both equals() and hashcode() functions, making sure both depend on the same sets of fields."},
	"IllegalCatch": {Category: "coding",
		Description: "Catch statements should not handle exception types like 'Exception', 'RuntimeException', or 'Throwable'.",
		Rationale:   "It is never acceptable to catch these types of exception superclasses, as these may lead to catching unexpected errors such as NullPointerException or OutOfMemoryException",
		Suggestion:  "Use a more specific catch statement."},
	"IllegalException": {Category: "coding",
		Description: "The code should never throw an exception like 'Exception' or 'RuntimeException', as this is never acceptable.",
		Rationale:   "This makes it harder to read errors. Try making your own Exception which extends 'Exception'."},
	"InnerAssignment": {Category: "coding",
		Description: "You should not assign variables in subexpressions, with exceptions to assignments in 'for' and 'while' statements.",
		Rationale:   "This makes it harder to see all the places where a variable is set.",
		Suggestion:  "Move the variable assignment outside of the subexpression."},
	"ModifiedControlVariable": {Category: "coding",
		Description: "Loop control variables should not be modified in the loop block.",
		Rationale:   "It makes it harder to follow the program flow.",
		Suggestion:  "Refractor the code as not to modify the control variable in the loop block."},
	"NestedForDepth": {Category: "coding",
		Description: "There are too many nested for loops.",
		Rationale:   "Deeply nested for loops can make it harder to follow the program flow, and may be a sign of bad code.",
		Suggestion:  "Try to reduce the number of nested loops by separating different functionality into separate methods."},
	"NestedIfDepth": {Category: "coding",
		Description: "There are too many nested if statements.",
		Rationale:   "Deeply nested if statement usually means that the function is trying to do many things.",
		Suggestion:  "Try to separate functionality into different methods or refractoring the code by combining if statements."},
	"NestedTryDepth": {Category: "coding",
		Description: "You are trying to nest try statements.",
		Rationale:   "The function may be trying to do many things.",
		Suggestion:  "You can combine try statements together, catching different types of exceptions. Or try separating functionality into different methods."},
	"OneStatementPerLine": {Category: "coding",
		Description: "There are multiple statements in a single line.",
		Rationale:   "Multiple statements crammed in a single line makes it harder to read the code.",
		Suggestion:  "Insert new lines between the statements, making the code easier to follow."},
	"OverloadMethodsDeclarationOrder": {Category: "coding",
		Description: "Overloaded methods must be grouped together.",
		Rationale:   "Grouping overloaded methods makes it easier to find other methods.",
		Suggestion:  "Cut and paste the methods to be after each other."},
	"PackageDeclaration": {Category: "coding",
		Description: "Every class must have a package declaration.",
		Rationale:   "Without a package declaration, the class cannot be imported.",
		Suggestion:  "Add a package declaration."},
	"ParameterAssignment": {Category: "coding",
		Description: "You should never assign parameters.",
		Rationale:   "It is considered a bad programming practice.",
		Suggestion:  "Refractor the code to avoid assigning parameter variables."},
	"RequireThis": {Category: "coding",
		Description: "You must include 'this.' when refering to instance variables and methods.",
		Rationale:   "It allows you to distinguish between instance and local variables.",
		Suggestion:  "Add 'this.' before the variable or method."},
	"SimplifyBooleanExpression": {Category: "coding",
		Description: "You must simplify over-complicated boolean expression.",
		Rationale:   "Over-complicated boolean expressions are redundant make the code harder to understand and maintain.",
		Suggestion:  "Simplify the boolean expression."},
	"SimplifyBooleanReturn": {Category: "coding",
		Description: "You must simplify over-complicated return statements.",
		Rationale:   "Overly-complicated return statements are too vulgar and can be simplified to a single line.",
		Suggestion:  "Simplify the return statement."},
	"StringLiteralEquality": {Category: "coding",
		Description: "You cannot check equality between two strings using == and != in Java.",
		Rationale:   "When using == and != to check equality between strings, you are comparing the memory pointer of the string rather than the actual string.",
		Suggestion:  "Use .equals() to check equality between two strings."},
	"UnnecessaryParanthesis": {Category: "coding",
		Description: "Unnecassary amount of paranthesis are used in a statement or expression.",
		Rationale:   "The extra amount of paranthesis are redundant.",
		Suggestion:  "Remove the redundant paranthesis from the statement or expression."},
	"MissingSwitchDefault": {Category: "coding",
		Description: "The switch statement is missing a default case.",
		Rationale:   "It is a good coding practice to include a default switch clause in every switch statement.",
		Suggestion:  "Add a default case in the switch statement."},
	"FallThrough": {Category: "coding",
		Description: "It is a good coding practice to add 'fallthrough' comments in fall-through cases in switch statements.",
		Rationale:   "This allows future developers to know that the order of the cases matter, and to be careful when changing the order.",
		Suggestion:  "Add a comment such as '// fallthru' on fall-through cases."},
	"UpperEll": {Category: "misc",
		Description: "Long constants must be defined with an upper ell 'L'.",
		Rationale:   "This is in accordance with the Java Language Specification.",
		Suggestion:  "Add an 'L' after the float constant."},
	"ModifierOrder": {Category: "modifier",
		Description: "The modifier order must follow: public, protected, private, abstract, default, static, final, transient, volatile, synchronized, native, strictfp.",
		Rationale:   "Following Java Language Specification's convention.",
		Suggestion:  "Change the order of the modifiers."},
	"OuterTypeFilename": {Category: "misc",
		Description: "The outer type and the file name must match. For example, if the class is called 'HEntry', the file name must be HEntry.java.",
		Rationale:   "Follows convention, and makes it easier to locate the file.",
		Suggestion:  "Rename the file or class to match."},
	"AvoidEscapedUnicodeCharacters": {Category: "misc",
		Description: "Try to avoid using Unicode escapes (such as \\u2126).",
		Rationale:   "Using Unicode escapes makes it harder to know what character is being used.",
		Suggestion:  "Replace unicode escapes with the character."},
	"LineLength": {Category: "sizes",
		Description: "Line is too long",
		Rationale:   "Long lines makes it harder to read, especially with developers who have limited screen space.",
		Suggestion:  "Separate the line into multiple lines."},
	"AvoidStarImport": {Category: "imports",
		Description: "No import statements should use the '*' notation.",
		Rationale:   "Importing all classes from a package or static members from a class leads to tight coupling which may introduce name clashes.",
		Suggestion:  "Replace star imports with more specific imports."},
	"OneTopLevelClass": {Category: "design",
		Description: "There should be only one top-level class, interface, or enum per file.",
		Rationale:   "Follows convention, and makes it easier to locate where the class, interface or enum resides.",
		Suggestion:  "Separate the class, interface, or enum in different files."},
	"NoLineWrap": {Category: "whitespace",
		Description: "Specific statements, such as import statements and package, method, enum, and interface definitions shouldn't be line-wrapped.",
		Suggestion:  "Make sure the definition or statement is defined in a single line."},
	"EmptyBlock": {Category: "blocks",
		Description: "Code should not contain empty blocks, with exception of case statements with fall-through.",
		Rationale:   "Empty blocks have no purpose.",
		Suggestion:  "Add a block body or remove the empty block."},
	"PackageName": {Category: "naming",
		Description: "The package name must conform to match the requirements in the Java Language specification."},
	"TypeName": {Category: "naming",
		Description: "Type names for classes, interfaces, enums, and annotations must conform to match the requirements in the Java Language specification."},
	"MemberName": {Category: "naming",
		Description: "Instance variable names must conform to the Java language specification's requirements."},
	"ParameterName": {Category: "naming",
		Description: "Method parameter names must conform to the Java Language specification's requirements."},
	"MethodName": {Category: "naming",
		Description: "Method names must conform to the Java Language specification's requirements."},
	"LambdaParameterName": {Category: "naming",
		Description: "Lambda parameter names must conform to the Java Language specification's requirements."},
	"CatchParameterName": {Category: "naming",
		Description: "Catch parameter names must conform to the Java Language specification's requirements."},
	"LocalParameterName": {Category: "naming",
		Description: "Local parameter names must conform to the Java Language specification's requirements."},
	"LocalVariableName": {Category: "naming",
		Description: "Local variable names must conform to the Java Language specification's requirements."},
	"ClassTypeParameterName": {Category: "naming",
		Description: "Class type parameter names must conform to the Java Language specification's requirements."},
	"MethodTypeParameterName": {Category: "naming",
		Description: "Method type parameter names must conform to the Java Language specification's requirements."},
	"InterfaceTypeParameterName": {Category: "naming",
		Description: "Interface type parameter names must conform to the Java Language specification's requirements."},
	"NoFinalizer": {Category: "coding",
		Description: "Verifies that there are no 'finalize()' methods defined in a class.",
		Rationale:   "Finalizers can be unpredictable, cause erratic behaviour and poor performance.",
		Suggestion:  "Avoid using finalizers completely."},
	"AbbreviationAsWordInName": {Category: "naming",
		Description: "Avoid using abbreviations as words in an identifier name.",
		Suggestion:  "Shorten identifier name and/or eliminate abbreviations."},
	"VariableDeclarationUsageDistance": {Category: "coding",
		Description: "Keep the distance between variable declaration and its first usage close."},
	"MethodParamPad": {Category: "whitespace",
		Description: "Avoid unnecessary whitespace between the method identifier and the open (left) paranthesis of the parameter list."},
	"ParenPad": {Category: "whitespace",
		Description: "Avoid unnecessary whitespace in parenthesis."},
	"OperatorWrap": {Category: "whitespace",
		Description: "Whether the operator should be wrapped in the previous or next line.",
		Suggestion:  "Move the operator to the previous or next line."},
	"AnnotationLocation": {Category: "annotation",
		Description: "Annotations should be immediately after the documentation block and separated in different lines."},
	"NonEmptyAtclauseDescription": {Category: "javadoc",
		Description: "At-clauses in a Javadoc should be followed by a description.",
		Suggestion:  "Add a description after the at-clause."},
	"SummaryJavadoc": {Category: "javadoc",
		Description: "A Javadoc statement shouldn't include phrases which aren't recommended to use.",
		Suggestion:  "Change the Javadoc summary statement so it doesn't include the phrase."},
	"JavadocParagraph": {Category: "javadoc",
		Description: "Make sure you have a single blank line between two paragraphs, and each paragraph after the first must start with <p>, with no space after."},
	"AtclauseOrder": {Category: "javadoc",
		Description: "Javadoc tags order must be as follows: @param, @return, @throws, and @deprecated."},
	"JavadocMethod": {Category: "javadoc",
		Description: "Make sure the Javadoc of the method or constructor is proper, follow the suggestion provided in the report for specifics on what to fix."},
	"MissingJavadocMethod": {Category: "javadoc",
		Description: "The public method is missing a Javadoc.",
		Suggestion:  "Add a Javadoc body.",
		Rationale:   "Public methods needs a Javadoc so its purpose is defined."},
	"SingleLineJavadoc": {Category: "javadoc",
		Description: "The Javadoc comment should be wrapped to multiple lines instead of a single line.",
		Rationale:   "The Javadoc is too long or contains at-clauses."},
	"EmptyCatchBlock": {Category: "blocks",
		Description: "Catch blocks shouldn't be empty, unless it contains comments.",
		Suggestion:  "Add a catch block body or rename the exception variable name to 'expected'."},
	"CommentsIndentation": {Category: "misc",
		Description: "Comments should be indented at the same level as the surrounding code.",
		Suggestion:  "Fix the identation of the comment to match the indentation level of the surrounding code."},
}

// CheckDesc represents a description of a checkstyle issue.
type CheckDesc struct {
	Category    string
	Description string
	Rationale   string
	Suggestion  string
	Example     string
}
